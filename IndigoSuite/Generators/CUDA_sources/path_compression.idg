typedef int data_t; /*@long@*/ typedef unsigned long long data_t;

#include "indigo_cuda.h"

__device__ data_t atomicRead(data_t* address) /*@raceBug@*/ /*@traverse@*/
{ /*@raceBug@*/ /*@traverse@*/
  return atomicOr(address, 0); /*@raceBug@*/ /*@traverse@*/
} /*@raceBug@*/ /*@traverse@*/

__device__ void atomicWrite(data_t* address, data_t value) /*@raceBug@*/ /*@traverse@*/
{ /*@raceBug@*/ /*@traverse@*/
  atomicExch(address, value); /*@raceBug@*/ /*@traverse@*/
} /*@raceBug@*/ /*@traverse@*/

__global__ void test_kernel(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  int i = threadIdx.x + blockIdx.x * blockDim.x; /*@persistent@*/ int idx = threadIdx.x + blockIdx.x * blockDim.x;
  if (i < numv) { /*@persistent@*/ for (int i = idx; i < numv; i += gridDim.x * blockDim.x) {
    int v = i;
    while (v > atomicRead(&data1[v])) { /*@raceBug@*/ while (v > data1[v]) { /*@traverse@*/ while (v > data1[v]) {
      v = atomicRead(&data1[v]); /*@raceBug@*/ v = data1[v]; /*@traverse@*/ v = data1[v];
    }
    atomicWrite(&data1[i], v); /*@raceBug@*/ data1[i] = v; /*@traverse@*/ data2[i] = v;
  }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int v = i;
    while (v > data1[v]) {
      v = data1[v];
    }
    data1[i] = v; /*@raceBug@*/ data1[i] = v; /*@traverse@*/ data2[i] = v;
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume, int blocks, int threadsperblock)
{
  if (numv > blocks * threadsperblock) { /*@persistent@*/
    printf("Error: too few threads\n"); /*@persistent@*/
    return -1; /*@persistent@*/
  } /*@persistent@*/
  for (int i = 0; i < numv; i++) {
    if (h_data1[i] != d_data1[i]) { /*@raceBug@*/ if (h_data1[i] != d_data1[i]) { /*@traverse@*/ if (h_data2[i] != d_data2[i]) {
      return 0;
    }
  }
  return 1;
}
