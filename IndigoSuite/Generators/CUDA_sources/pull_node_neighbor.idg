typedef int data_t; /*@long@*/ typedef unsigned long long data_t; /*@short@*/ typedef unsigned short data_t; /*@char@*/ typedef signed char data_t; /*@float@*/ typedef float data_t; /*@double@*/ typedef double data_t;

#include "indigo_cuda.h"

__global__ void test_kernel(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  int i = threadIdx.x + blockIdx.x * blockDim.x; /*@persistent@*/ int idx = threadIdx.x + blockIdx.x * blockDim.x;
  if (i < numv) { /*@persistent@*/ for (int i = idx; i < numv; i += gridDim.x * blockDim.x) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    if (beg < end) { /*@boundsBug@*/
      int nei = nlist[beg]; /*@last@*/ int nei = nlist[end - 1];
      /*@cond@*/ if (i < nei) {
        data1[i] += data2[nei];
      /*@cond@*/ }
    } /*@boundsBug@*/
  } /*@persistent@*/ }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    if (beg < end) {
      int nei = nlist[beg]; /*@last@*/ int nei = nlist[end - 1];
      /*@cond@*/ if (i < nei) {
        data1[i] += data2[nei];
      /*@cond@*/ }
    }
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume, int blocks, int threadsperblock)
{
  if (numv > blocks * threadsperblock) { /*@persistent@*/
    printf("Error: too few threads\n"); /*@persistent@*/
    return -1; /*@persistent@*/
  } /*@persistent@*/
  for (int i = 0; i < numv; i++) {
    if (h_data1[i] != d_data1[i]) {
      return 0;
    }
  }
  return 1;
}
