typedef int data_t; /*@long@*/ typedef unsigned long long data_t;

#include "indigo_cuda.h"

__global__ void test_kernel(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  int lane = threadIdx.x % 32;
  int i = (threadIdx.x + blockIdx.x * blockDim.x) / 32; /*@persistent@*/ int idx = threadIdx.x + blockIdx.x * blockDim.x;
  if (i < numv) { /*@persistent@*/ for (int i = idx / 32; i < numv; i += (gridDim.x * blockDim.x) / 32) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    data_t val = 0;
    for (int j = beg + lane; j < end; j += 32) { /*@reverse@*/ for (int j = end - 1 - lane; j >= beg; j -= 32) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        val = max(val, data2[nei]);
      /*@cond@*/ }
    }
    val = max(val, __shfl_xor_sync(~0, val, 1));
    val = max(val, __shfl_xor_sync(~0, val, 2));
    val = max(val, __shfl_xor_sync(~0, val, 4));
    val = max(val, __shfl_xor_sync(~0, val, 8));
    val = max(val, __shfl_xor_sync(~0, val, 16));
    if (lane == 0) {
      /*@guardBug@*/ if (data1[0] < val) {
        atomicMax(data1, val); /*@atomicBug@*/ data1[0] = max(data1[0], val);
      /*@guardBug@*/ }
    }
  }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        data1[0] = max(data1[0], data2[nei]);
      /*@cond@*/ }
    }
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume, int blocks, int threadsperblock)
{
  if (numv > blocks * threadsperblock / 32) { /*@persistent@*/
    printf("Error: too few threads\n"); /*@persistent@*/
    return -1; /*@persistent@*/
  } /*@persistent@*/
  if (threadsperblock % 32 != 0) {
    printf("Error: partial warps not supported\n");
    return -1;
  }
  if (h_data1[0] == d_data1[0]) {
    return 1;
  } else {
    return 0;
  }
}
