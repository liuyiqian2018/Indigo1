typedef int data_t; /*@long@*/ typedef unsigned long long data_t;

#include "indigo_cuda.h"

__global__ void test_kernel(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  int lane = threadIdx.x % 32;
  int i = (threadIdx.x + blockIdx.x * blockDim.x) / 32; /*@persistent@*/ int idx = threadIdx.x + blockIdx.x * blockDim.x;
  if (i < numv) { /*@persistent@*/ for (int i = idx / 32; i < numv; i += (gridDim.x * blockDim.x) / 32) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg + lane; j < end; j += 32) { /*@reverse@*/ for (int j = end - 1 - lane; j >= beg; j -= 32) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        atomicMin(&data1[nei], data2[i]); /*@atomicBug@*/ data1[nei] = min(data1[nei], data2[i]);
      /*@cond@*/ }
    }
  }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        data1[nei] = min(data1[nei], data2[i]);
      /*@cond@*/ }
    }
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume, int blocks, int threadsperblock)
{
  if (numv > blocks * threadsperblock / 32) { /*@persistent@*/
    printf("Error: too few threads\n"); /*@persistent@*/
    return -1; /*@persistent@*/
  } /*@persistent@*/
  for (int i = 0; i < numv; i++) {
    if (h_data1[i] != d_data1[i]) {
      return 0;
    }
  }
  return 1;
}
