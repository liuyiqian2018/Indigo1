typedef int data_t; /*@long@*/ typedef unsigned long long data_t;

#include "indigo_cuda.h"

__global__ void test_kernel(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  int i = blockIdx.x; /*@persistent@*/
  if (i < numv) { /*@persistent@*/ for (int i = blockIdx.x; i < numv; i += gridDim.x) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    data_t sum = 0;
    for (int j = beg + threadIdx.x; __syncthreads_or(j < end); j += blockDim.x) { /*@reverse@*/ for (int j = end - 1 - threadIdx.x; __syncthreads_or(j >= beg); j -= blockDim.x) {
      int nei = (j < end) ? nlist[j] : i; /*@reverse@*/ int nei = (j >= beg) ? nlist[j] : i;
      sum += __syncthreads_count(i < nei);
    }
    if (threadIdx.x == 0) {
      atomicAdd(data1, sum); /*@atomicBug@*/ data1[0] += sum;
    }
  }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) {
      int nei = nlist[j];
      if (i < nei) {
        data1[0]++;
      }
    }
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume, int blocks, int threadsperblock)
{
  if (numv > blocks) { /*@persistent@*/
    printf("Error: too few threads\n"); /*@persistent@*/
    return -1; /*@persistent@*/
  } /*@persistent@*/
  if (h_data1[0] == d_data1[0]) {
    return 1;
  } else {
    return 0;
  }
}
