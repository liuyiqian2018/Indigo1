typedef int data_t; /*@long@*/ typedef unsigned long long data_t;

#include "indigo_cuda.h"

__global__ void test_kernel(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  int i = threadIdx.x + blockIdx.x * blockDim.x; /*@persistent@*/ int idx = threadIdx.x + blockIdx.x * blockDim.x; /*@boundsBug@*/ int i = threadIdx.x + blockIdx.x * blockDim.x;
  if (i < numv) { /*@persistent@*/ for (int i = idx; i < numv; i += gridDim.x * blockDim.x) { /*@boundsBug@*/
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) { /*@reverse@*/ for (int j = end - 1; j >= beg; j--) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        /*@guardBug*/ if (data1[0] < data2[nei]) {
          atomicMax(data1, data2[nei]); /*@atomicBug@*/ data1[0] = max(data1[0], data2[nei]);
        /*@guardBug*/ }
        /*@break@*/ break;
      /*@cond@*/ }
    }
  } /*@persistent@*/ } /*@boundsBug@*/
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) { /*@reverse@*/ for (int j = end - 1; j >= beg; j--) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        data1[0] = max(data1[0], data2[nei]);
        /*@break@*/ break;
      /*@cond@*/ }
    }
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume, int blocks, int threadsperblock)
{
  if (numv > blocks * threadsperblock) { /*@persistent@*/ /*@boundsBug@*/ if (numv > blocks * threadsperblock) {
    printf("Error: too few threads\n"); /*@persistent@*/ /*@boundsBug@*/ printf("Error: too few threads\n");
    return -1; /*@persistent@*/ /*@boundsBug@*/ return -1;
  } /*@persistent@*/ /*@boundsBug@*/ }
  if (h_data1[0] == d_data1[0]) {
    return 1;
  } else {
    return 0;
  }
}
