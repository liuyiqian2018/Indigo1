typedef int data_t; /*@long@*/ typedef unsigned long long data_t; /*@short@*/ typedef unsigned short data_t; /*@char@*/ typedef signed char data_t; /*@float@*/ typedef float data_t; /*@double@*/ typedef double data_t;

#include "indigo_openmp.h"

void omp_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  #pragma omp parallel for /*@dynamic@*/ #pragma omp parallel for schedule(dynamic)
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) { /*@reverse@*/ for (int j = end - 1; j >= beg; j--) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        data1[i] += data2[nei];
        /*@break@*/ break;
      /*@cond@*/ }
    }
  }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int beg = nindex[i];
    int end = nindex[i + 1];
    for (int j = beg; j < end; j++) { /*@reverse@*/ for (int j = end - 1; j >= beg; j--) {
      int nei = nlist[j];
      /*@cond@*/ if (i < nei) {
        data1[i] += data2[nei];
        /*@break@*/ break;
      /*@cond@*/ }
    }
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume)
{
  for (int i = 0; i < numv; i++) {
    if (h_data1[i] != d_data1[i]) {
      return 0;
    }
  }
  return 1;
}
