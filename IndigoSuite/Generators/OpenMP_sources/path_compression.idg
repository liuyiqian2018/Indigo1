typedef int data_t; /*@long@*/ typedef unsigned long long data_t; /*@short@*/ typedef unsigned short data_t; /*@char@*/ typedef signed char data_t; /*@float@*/ typedef float data_t; /*@double@*/ typedef double data_t;

#include "indigo_openmp.h"

data_t atomicRead(data_t* address) /*@raceBug@*/ /*@traverse@*/
{ /*@raceBug@*/ /*@traverse@*/
  data_t ret; /*@raceBug@*/ /*@traverse@*/
  #pragma omp atomic read /*@raceBug@*/ /*@traverse@*/
  ret = *address; /*@raceBug@*/ /*@traverse@*/
  return ret; /*@raceBug@*/ /*@traverse@*/
} /*@raceBug@*/ /*@traverse@*/

void atomicWrite(data_t* address, data_t value) /*@raceBug@*/ /*@traverse@*/
{ /*@raceBug@*/ /*@traverse@*/
  #pragma omp atomic write /*@raceBug@*/ /*@traverse@*/
  *address = value; /*@raceBug@*/ /*@traverse@*/
} /*@raceBug@*/ /*@traverse@*/

void omp_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  # pragma omp parallel for /*@dynamic@*/ #pragma omp parallel for schedule(dynamic)
  for (int i = 0; i < numv; i++) {
    int v = i;
    while (v > atomicRead(&data1[v])) { /*@raceBug@*/ while (v > data1[v]) { /*@traverse@*/ while (v > data1[v]) {
      v = atomicRead(&data1[v]); /*@raceBug@*/ v = data1[v]; /*@traverse@*/ v = data1[v];
    }
    atomicWrite(&data1[i], v); /*@raceBug@*/ data1[i] = v; /*@traverse@*/ data2[i] = v;
  }
}

void serial_code(int* nindex, int* nlist, data_t* data1, data_t* data2, int numv)
{
  for (int i = 0; i < numv; i++) {
    int v = i;
    while (v > data1[v]) {
      v = data1[v];
    }
    data1[i] = v; /*@raceBug@*/ data1[i] = v; /*@traverse@*/ data2[i] = v;
  }
}

int verify_result(int* nindex, int* nlist, data_t* h_data1, data_t* h_data2, data_t* d_data1, data_t* d_data2, int numv, int nume)
{
  for (int i = 0; i < numv; i++) {
    if (h_data1[i] != d_data1[i]) { /*@raceBug@*/ if (h_data1[i] != d_data1[i]) { /*@traverse@*/ if (h_data2[i] != d_data2[i]) {
      return 0;
    }
  }
  return 1;
}
